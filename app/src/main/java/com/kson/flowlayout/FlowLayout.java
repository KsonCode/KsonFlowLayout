package com.kson.flowlayout;import android.content.Context;import android.util.AttributeSet;import android.util.Log;import android.view.ViewGroup;public class FlowLayout extends ViewGroup {    public int mLeftMargin = 20;    public int mTopMargin = 20;    public FlowLayout(Context context) {        super(context);    }    public FlowLayout(Context context, AttributeSet attrs) {        super(context, attrs);    }    public FlowLayout(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        Log.e("tag" , "onMeasure");        measureChildren(widthMeasureSpec ,heightMeasureSpec);        int leftMargin = mLeftMargin;        int topMargin = mTopMargin;        int sizeWidth = MeasureSpec.getSize(widthMeasureSpec);        int modelWidth = MeasureSpec.getMode(widthMeasureSpec);        int sizeHeigth = MeasureSpec.getSize(heightMeasureSpec);        int modelHeigth = MeasureSpec.getMode(heightMeasureSpec);        switch (modelHeigth){            case MeasureSpec.AT_MOST:                int measuredHeight = 0 ;                for (int j = 0 ; j < getChildCount() ; j ++){                    int measuredWidth = getChildAt(j).getMeasuredWidth();                    measuredHeight = getChildAt(j).getMeasuredHeight();                    if (leftMargin + measuredWidth + mLeftMargin > getMeasuredWidth()){                        leftMargin = mLeftMargin;                        topMargin += measuredHeight + mTopMargin;                    }                    leftMargin += measuredWidth + mLeftMargin;                }                topMargin += measuredHeight + mTopMargin;                break;        }        setMeasuredDimension(sizeWidth , topMargin);    }    @Override    protected void onLayout(boolean changed, int l, int t, int r, int b) {        Log.e("tag" , "onLayout");        int leftMargin = mLeftMargin;        int topmargin = mTopMargin;        for (int j = 0 ; j < getChildCount() ; j ++){            int measuredHeight = getChildAt(j).getMeasuredHeight();            int measuredWidth = getChildAt(j).getMeasuredWidth();            if (leftMargin + measuredWidth + mLeftMargin > getWidth()){                leftMargin = mLeftMargin;                topmargin += measuredHeight + mTopMargin;                getChildAt(j).layout(leftMargin , topmargin , measuredWidth + leftMargin , measuredHeight + topmargin  );            }else {                getChildAt(j).layout(leftMargin , topmargin , measuredWidth + leftMargin ,measuredHeight + topmargin  );            }            leftMargin += measuredWidth + mLeftMargin;        }    }}